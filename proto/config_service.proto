syntax = "proto3";
package api.v1;

import "google/api/annotations.proto";

option go_package = "/api";

service ConfigService {
  rpc GetConfig(GetConfigRequest) returns (GetConfigResponse) {
    option (google.api.http) = {get: "/config"};
  }

  rpc UpdateConfig(UpdateConfigRequest) returns (UpdateConfigResponse) {
    option (google.api.http) = {
      post: "/config:update"
      body: "*"
    };
  }

  rpc GetIpBlackList(GetIpBlackListRequest) returns (GetIpBlackListResponse) {
    option (google.api.http) = {get: "/config/iplist"};
  }

  rpc UpdateIpBlackList(UpdateIpBlackListRequest) returns (UpdateIpBlackListResponse) {
    option (google.api.http) = {
      post: "/config/iplist:update"
      body: "*"
    };
  }

  rpc ConfigRouter(ConfigRouterRequest) returns (ConfigRouterResponse) {}

  rpc UpdateHealthzList(UpdateHealthzListRequest) returns (UpdateHealthzListResponse) {}
}

message GetConfigRequest {}

message GetConfigResponse {
  bool http_compression = 1;
  bool https = 2;
  bool enable_rate_limitor = 3;
  uint32 num_token_max = 4;
  uint32 num_token_per_sec = 5;
}

message UpdateConfigRequest {
  repeated string path = 1;
  bool http_compression = 2;
  bool https = 3;
  bool enable_rate_limitor = 4;
  uint32 num_token_max = 5;
  uint32 num_token_per_sec = 6;
}

// TODO: capsulate it with 'Config' struct.
message UpdateConfigResponse {
  bool http_compression = 1;
  bool https = 2;
  bool enable_rate_limitor = 3;
  uint32 num_token_max = 4;
  uint32 num_token_per_sec = 5;
  bool enable_external_auth = 6;
}

message GetIpBlackListRequest {}

message GetIpBlackListResponse {
  repeated string ip_list = 1;
}

message UpdateIpBlackListRequest {
  enum ActionType {
    ACTION_TYPE_UNSPECIFIED = 0;
    ACTION_TYPE_ADD = 1;
    ACTION_TYPE_REMOVE = 2;
  }
  ActionType action = 1;
  repeated string ip_list = 2;
}

message UpdateIpBlackListResponse {}

message ConfigRouterRequest {
  repeated RouterRule rules = 1;
}

message RouterRule {
  enum ProtocolType {
    PROTOCOL_TYPE_UNSPECIFIED = 0;
    PROTOCOL_TYPE_TCP = 1;
    PROTOCOL_TYPE_HTTP = 2;
    PROTOCOL_TYPE_WEBSOCKET = 3;
  }
  ProtocolType protocol = 1;
  // "/api/v1/user"
  string match_path = 2;
  uint32 dest_port = 3;
  string dest_host = 4;
  string dest_path = 5;
  bool remote = 6;
}

message ConfigRouterResponse {
  // TODO: only for demo...
  string message = 1;
}

// TODO: action type.
message UpdateHealthzListRequest {
  string action = 1;
  repeated string addrs = 2;
  // TODO: only for demo...
}

message UpdateHealthzListResponse {
  string message = 1;
}
