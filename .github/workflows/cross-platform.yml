name: Linux CI

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  linux-build:
    name: Build on Linux
    runs-on: ubuntu-22.04
    
    strategy:
      fail-fast: false
      matrix:
        build_type: [Release]
        include:
          - build_type: Release
            triplet: x64-linux
            executable: azugate
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: 'cd124b84feb0c02a24a2d90981e8358fdee0e077'
        runVcpkgInstall: true
    
    - name: Install Linux Dependencies
      run: |
        sudo apt update
        sudo apt install -y build-essential cmake ninja-build pkg-config
    
    - name: Configure CMake
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake \
          -G Ninja
    
    - name: Build Project
      run: |
        cmake --build build --config ${{ matrix.build_type }} --parallel
    
    - name: Test Binary
      run: |
        echo "=== Testing ${{ matrix.executable }} ==="
        file build/${{ matrix.executable }}
        ldd build/${{ matrix.executable }} || echo "Dependencies check completed"
        
        # Test help command
        timeout 10s build/${{ matrix.executable }} --help || echo "Help test completed"
    
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: azugate-ubuntu-22.04-${{ matrix.build_type }}
        path: |
          build/${{ matrix.executable }}
          build/**/*.so*
        if-no-files-found: ignore
        retention-days: 7

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-22.04
    needs: linux-build
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Download Linux Artifact
      uses: actions/download-artifact@v4
      with:
        name: azugate-ubuntu-22.04-Release
        path: ./linux-build
    
    - name: Setup Test Environment
      run: |
        chmod +x ./linux-build/azugate
        
        # Create test configuration
        mkdir -p test-env
        cd test-env
        
        # Basic configuration file
        cat > config.yaml << EOF
        server:
          port: 8080
          grpc_port: 50051
        logging:
          level: info
        EOF
    
    - name: Run Integration Tests
      timeout-minutes: 2
      run: |
        cd test-env
        
        echo "=== Starting Integration Tests ==="
        
        # Test 1: Configuration validation
        echo "Testing configuration validation..."
        timeout 5s ../linux-build/azugate --config config.yaml --validate || echo "Config validation test completed"
        
        # Test 2: Service startup (background)
        echo "Testing service startup..."
        timeout 10s ../linux-build/azugate --config config.yaml &
        SERVER_PID=$!
        sleep 3
        
        # Test 3: Health check
        if kill -0 $SERVER_PID 2>/dev/null; then
          echo "✅ Server started successfully"
          
          # Test gRPC port (if available)
          if command -v nc >/dev/null; then
            nc -z localhost 50051 && echo "✅ gRPC port accessible" || echo "⚠️ gRPC port not accessible"
          fi
          
          # Test HTTP port (if available)
          if command -v nc >/dev/null; then
            nc -z localhost 8080 && echo "✅ HTTP port accessible" || echo "⚠️ HTTP port not accessible"
          fi
          
          # Cleanup
          kill $SERVER_PID 2>/dev/null || echo "Server already stopped"
        else
          echo "❌ Server failed to start"
        fi

  release:
    name: Create Release
    runs-on: ubuntu-22.04
    needs: [linux-build, integration-test]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./release-artifacts
    
    - name: Prepare Release Assets
      run: |
        cd release-artifacts
        
        # Create Linux release package
        for dir in */; do
          if [[ -d "$dir" ]]; then
            echo "Processing $dir..."
            cd "$dir"
            
            # Find executables and create archives (Linux only)
            if ls azugate* > /dev/null 2>&1; then
              tar -czf "../${dir%/}.tar.gz" *
            fi
            cd ..
          fi
        done
        
        ls -la *.tar.gz || echo "No release packages created"
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release-artifacts/*.tar.gz
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
